AWSTemplateFormatVersion: 2010-09-09

Parameters:
  InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
  KeyName:
    Description: Name of an existing EC2 key pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
  ImageId:
    Type: 'AWS::EC2::Image::Id'
    Default: ami-0230bd60aa48260c6

Description: >
  Hi, this is a demo template for creating a nodejs server on a ec2
Resources:
  # creating VPC
  FinalProjectVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: FinalProjectVpc

  # creating internet gateway (IGW) for the VPC
  FinalProjectIgw:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: final-project-igw

  # connects IGW with VPC
  FinalProjectAttachIgw:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref FinalProjectVpc
      InternetGatewayId: !Ref FinalProjectIgw

  # create a public subnet
  FinalProjectVpcSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref FinalProjectVpc
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: final-project-vpc-public-subnet


  # create a route table
  FinalProjectPublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref FinalProjectVpc
      Tags:
        - Key: Name
          Value: Final-Project-public-route-table

  # associate the route table to the public subnet
  FinalProjectRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref FinalProjectPublicRouteTable
      SubnetId: !Ref FinalProjectVpcSubnet

  # add a route entry to IGW into route table
  FinalProjectInternetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref FinalProjectPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref FinalProjectIgw

  # create security group
  FinalProjectVpcSg:
    Type: AWS::EC2::SecurityGroup
    DependsOn: FinalProjectVpc
    Properties:
      GroupDescription: SG to test ping
      VpcId: !Ref FinalProjectVpc
      SecurityGroupIngress:
        # 22 is for ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # icmp is for ping (a network testing program)
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        # 3000 is for next-js webapp
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        # 80 is for http
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # 443 is for https
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  FinalProjectEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - Ref: FinalProjectVpcSg
          SubnetId: !Ref FinalProjectVpcSubnet
      UserData:
        Fn::Base64:
          |
          #!/bin/bash 
          set -ex
          sudo yum install python -y &> /dev/null
          sudo yum install git -y &> /dev/null
          sudo yum install pip -y &> /dev/null
          sudo pip install virtualenv &> /dev/null
          pip install --upgrade pip &> /dev/null
          DIR1="eb-virt"
          if [ -d "DIR1" ];
          then
              source ~/eb-virt/bin/activate
              pip install Django &> /dev/null
              pip install django-crispy-forms &> /dev/null
              python -m pip install Pillow &> /dev/null
              pip install bootstrap &> /dev/null
              pip install psycopg2-binary &> /dev/null
              sudo dnf install -y pip &> /dev/null
              sudo dnf install -y mariadb105-devel gcc python3-devel &> /dev/null
              pip install mysqlclient &> /dev/null
          else
              virtualenv ~/eb-virt &> /dev/null
              source ~/eb-virt/bin/activate
              pip install Django &> /dev/null
              pip install django-crispy-forms &> /dev/null
              python -m pip install Pillow &> /dev/null
              pip install bootstrap &> /dev/null
              pip install psycopg2-binary &> /dev/null
              sudo dnf install -y pip &> /dev/null
              sudo dnf install -y mariadb105-devel gcc python3-devel &> /dev/null
              pip install mysqlclient &> /dev/null
          fi
        
          DIR=" Group3FinalProject"
        
          if [ -d "$DIR" ];
          then
              rm -rf  Group3FinalProject/
              git clone https://github.com/sheik-kajaalimohiddin/Group3FinalProject.git &> /dev/null
              cd  Group3FinalProject/
              python manage.py makemigrations &> /dev/null
              python manage.py migrate &> /dev/null
              python manage.py runserver 0.0.0.0:8000 &> /dev/null
          else
              git clone https://github.com/sheik-kajaalimohiddin/Group3FinalProject.git &> /dev/null
              cd  Group3FinalProject/
              python manage.py makemigrations &> /dev/null
              python manage.py migrate &> /dev/null
              python manage.py runserver 0.0.0.0:8000 &> /dev/null
          fi
          EOF

Outputs:
  FinalProjectVpc:
    Description: FinalProjectVpc
    Value: !Ref FinalProjectVpc
    Export:
      Name: FinalProjectVpc-ID
  WebsiteURL:
    Description: URL for newly created nextjs app
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - FinalProjectEc2Instance
          - PublicDnsName
        - ':8000'

